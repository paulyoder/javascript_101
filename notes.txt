JavaScript Presentation

Titles
  - JavaScript is not C#

JavaScript Nuances

- semicolons
  - always use because
    - sometimes engine guesses wrong
    - minification
- undefined vs null
- basic function
- variables
  - scope
    - not to code blocks or brackets
  - var and global variables  
  - not scoped to a block
  - hoisting
- equality
  - == vs ===
  - only use == when looking for null or undefined
- loops
  - cache array length
    - http://jsperf.com/caching-array-length-in-loop
    - http://jsperf.com/caching-jquery-selector-length-in-loop
- objects
  - defining a blank object
  - dynamic properties
  - object literal
  - namespacing
- functions
  - anonymous function
  - return function
  - callbacks
  - closures
  - immediate functions
  - revealing module pattern
- custom objects
  - context and new
  - context and callbacks



- Global Variables
  - namespacing
- prototypes
  - prototypal inheritance vs classical inheritance
    - bad use
      Constructor = function(whatToSay) {
        this.whatToSay = whatToSay;
        this.Main = function() {
          console.log(this.whatToSay);
        };
      };
    - good use
      Constructor = funciton(whatToSay) {
        this.whatToSay = whatToSay;
      };

      Constructor.prototype.Main = function() {
        console.log(this.whatToSay);
      };
- context
- extends
  - base types through prototypal inheritance
- functions
  - module pattern
  - constructor functions
  - all functions have a .prototype that instances inherit from

- TypeScript
  - still in preview. Microsoft does not recommend it for production systems
  - places unneeded restraints on JavaScript
    - like clipping a birds wings
  - static languages only provide 1 additional unit test: compiling
    - just because it's static doesn't mean you won't have errors
      - else all our c# code would not have any bugs in it
  - you can't debug in TypeScript
    - Modules in TypeScript are a little different than modules in JavaScript
  - type safety is overrated
    - can anyone write a letter to your mom without using a spell checker?
    - it's easy to fix the code when it's missing a property
      - the long and hard debugging are not as a result of lack of type safety

