JavaScript Presentation

Titles
  - Getting out of the boat with JavaScript
  - Learn how to fly with JavaScript
  - Breaking the bonds with JavaScript

JavaScript Traps (get better name)
  - creating global variables

- Variables
  - scope
  - global variables
    - global window object
    - example
  - undefined
    - difference between undefined and null reference exception


- Global Variables
  - Example of plugin overwriting your function
  - namespacing
- order of javascript files
- variables
  - var
  - hoisting
  - scope
    - global
    - function
    - not block
- objects
  - object literals
- prototypes
  - prototypal inheritance vs classical inheritance
    - bad use
      Constructor = function(whatToSay) {
        this.whatToSay = whatToSay;
        this.Main = function() {
          console.log(this.whatToSay);
        };
      };
    - good use
      Constructor = funciton(whatToSay) {
        this.whatToSay = whatToSay;
      };

      Constructor.prototype.Main = function() {
        console.log(this.whatToSay);
      };
- equality
- context
- closures
- extends
  - base types through prototypal inheritance
- functions
  - immediately invoking function
    - revealing module pattern
      - private variables
  - module pattern
  - constructor functions
  - all functions have a .prototype that instances inherit from
- loops
  - for in vs for

- TypeScript
  - still in preview. Microsoft does not recommend it for production systems
  - places unneeded restraints on JavaScript
    - like clipping a birds wings
  - static languages only provide 1 additional unit test: compiling
    - just because it's static doesn't mean you won't have errors
      - else all our c# code would not have any bugs in it
  - you can't debug in TypeScript
    - Modules in TypeScript are a little different than modules in JavaScript
  - type safety is overrated
    - can anyone write a letter to your mom without using a spell checker?
    - it's easy to fix the code when it's missing a property
      - the long and hard debugging are not as a result of lack of type safety

